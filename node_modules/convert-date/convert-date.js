// Convert date module
// Robert Wozniak

class ConvertDate {
    constructor () {
        this.date = new Date()
        this.monthNames = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ]
        this.ends = ['st', 'nd', 'rd'];
        this.day = this.date.getUTCDate()
        this.month = this.date.getUTCMonth()
        this.year = this.date.getUTCFullYear()
    }

    convertDays (newDate) {
        // Convert days into better looking form
        this.day = newDate.getUTCDate();
        const dayAsString = this.day.toString();
        const dayError = errorHandler;
        if (dayError.dayOfMonthLength(dayAsString)) {
            this.ends.map((value, index) => {
                if (dayAsString.length === 1) {
                    if (this.day >= 4 && this.day <= 9) {
                        this.day = `0${ this.day }th`;
                    } else {
                        this.day === index + 1 ? this.day = `0${ this.day }${ value }` : false
                    }
                } else if (dayAsString.length === 2) {
                    dayAsString[1] === (index + 1).toString() ? this.day = `${ this.day }${ value }` : false
                }
            });

            ((dayAsString[1] === (0).toString()) || (dayAsString[1] >= 4 && dayAsString[1] <= 9)) ? this.day = `${ this.day }th` : false
        }

        return this.day
    }

    convertMonths (newDate) {
        // Convert number of months into names.
        this.month = newDate.getUTCMonth()
        this.month = this.monthNames[this.month]
        return this.month
    }

    convertYears (newDate) {
        // Return current year
        this.year = newDate.getUTCFullYear()
        return this.year
    }

    convertDate (newDate = new Date()) {
        // Merge everyting into one.
        const days = this.convertDays(newDate)
        const months = this.convertMonths(newDate)
        const years = this.convertYears(newDate)

        return `${ days } of ${ months } ${ years }`
    }
}

class ErrorHandler {
    // Handle day errors.
    dayOfMonthLength (num) {
        if (num.length > 2 && num !== 'NaN') {
            throw RangeError(`The day of the month, can't contain three numbers. Only two numbers are allowed.`);
        } else if (num === 'NaN') {
            throw SyntaxError(`The day of the month can't be zero or multiple zero number, it has to be 01 or 1`);
        }

        return true;
    }
}
const dateConverter = new ConvertDate()
const errorHandler = new ErrorHandler()
export default dateConverter
